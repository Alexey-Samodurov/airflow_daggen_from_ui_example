"""
–°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ DAG
"""

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import threading
import logging

from airflow_dag_generator.generators.base_generator import BaseGenerator
from airflow_dag_generator.generators.registry import (
    GeneratorRegistry,
    get_registry,
    register_generator,
    get_generator,
    list_generators
)
from airflow_dag_generator.generators.discovery import (
    get_discovery_manager,
    discover_and_register_generators,
    manual_reload_all
)

logger = logging.getLogger(__name__)

# –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
_initialized = False
_initialization_lock = threading.RLock()

def initialize_generator_system(force_reload=False):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    global _initialized
    
    with _initialization_lock:
        if _initialized and not force_reload:
            logger.debug("Generator system already initialized, skipping")
            registry = get_registry()
            return {
                'total_count': len(registry),
                'discovered_count': 0,
                'already_initialized': True
            }
        
        logger.info("Initializing DAG Generator system...")
        registry = get_registry()
        
        # –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ - –æ—á–∏—â–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
        if force_reload:
            registry.clear()
            logger.info("Registry cleared for force reload")
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
        discovered_count = 0
        try:
            discovered_count = discover_and_register_generators()
            logger.info(f"Discovered {discovered_count} external generators")
        except Exception as e:
            logger.warning(f"Failed to discover external generators: {e}")
        
        total_generators = len(registry)
        logger.info(f"üöÄ DAG Generator system initialized successfully!")
        logger.info(f"üìä Total generators: {total_generators}")
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
        if total_generators > 0:
            generators_list = list_generators()
            generator_names = [g['name'] for g in generators_list]
            logger.info(f"üìã Available generators: {generator_names}")
        else:
            logger.error("‚ùå No generators found! Something is wrong with initialization.")
        
        _initialized = True
        
        return {
            'discovered_count': discovered_count,
            'total_count': total_generators,
            'already_initialized': False
        }


def safe_manual_reload():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä—É—á–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    logger.info("=== MANUAL RELOAD REQUESTED ===")
    
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        result = initialize_generator_system(force_reload=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ discovery manager
        try:
            discovery_manager = get_discovery_manager()
            if discovery_manager:
                additional_count = discovery_manager.manual_reload_all()
                logger.info(f"Discovery manager loaded additional {additional_count} generators")
        except Exception as e:
            logger.warning(f"Discovery manager reload failed: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        registry = get_registry()
        final_count = len(registry)
        
        logger.info(f"=== MANUAL RELOAD COMPLETED: {final_count} total generators ===")
        return final_count
        
    except Exception as e:
        logger.error(f"Manual reload failed: {e}")
        import traceback
        traceback.print_exc()
        raise


def get_all_generators():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    registry = get_registry()
    generators_dict = {}
    
    for name in registry.list_all():
        try:
            generator = registry.get(name)
            if generator:
                generators_dict[name] = generator
        except Exception as e:
            logger.error(f"Error getting generator {name}: {e}")
    
    return generators_dict


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è (–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
try:
    import threading
    _init_result = initialize_generator_system()
    logger.info(f"Initial initialization result: {_init_result}")
except Exception as e:
    logger.error(f"Failed to initialize generator system: {e}")
    import traceback
    traceback.print_exc()
    _init_result = None

# Public API
__all__ = [
    # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    'BaseGenerator',
    'GeneratorRegistry',

    # –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞
    'get_registry',
    'register_generator',
    'get_generator',
    'get_all_generators',  # –î–û–ë–ê–í–õ–ï–ù–û!
    'list_generators',

    # –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ hot-reload
    'get_discovery_manager',
    'discover_and_register_generators',
    'manual_reload_all',

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    'initialize_generator_system',
    'safe_manual_reload',
]

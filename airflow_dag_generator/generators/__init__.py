"""
–°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ DAG
"""

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from airflow_dag_generator.generators.base_generator import BaseGenerator
from airflow_dag_generator.generators.registry import (
    GeneratorRegistry,
    get_registry,
    register_generator,
    get_generator,
    list_generators
)
from airflow_dag_generator.generators.hello_world_generator import HelloWorldGenerator
from airflow_dag_generator.generators.discovery import (
    get_discovery_manager,
    discover_and_register_generators,
    start_hot_reload,
    stop_hot_reload,
    is_hot_reload_active,
    force_reload_all
)

import logging
import os

# from flask import Blueprint

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# dag_generator_bp = Blueprint(
#     'dag_generator',
#     __name__,
#     template_folder='templates',
#     static_folder='templates/static',  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
#     url_prefix='/dag-generator'
# )

logger = logging.getLogger(__name__)


def initialize_generator_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    logger.info("Initializing DAG Generator system...")

    # 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π hello_world –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    # (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    builtin_generators = [
        HelloWorldGenerator(),
    ]

    registry = get_registry()
    builtin_count = 0

    for generator in builtin_generators:
        try:
            if registry.register(generator, force=True):
                builtin_count += 1
                logger.info(f"‚úÖ Registered builtin generator: {generator.generator_name}")
        except Exception as e:
            logger.error(f"Failed to register builtin generator {generator.generator_name}: {e}")

    logger.info(f"Registered {builtin_count} builtin generators")

    # 2. –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –í–°–ï –≤–Ω–µ—à–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    try:
        discovered_count = discover_and_register_generators()
        logger.info(f"Discovered {discovered_count} external generators")
    except Exception as e:
        logger.warning(f"Failed to discover external generators: {e}")
        discovered_count = 0

    # 3. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å hot-reload (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    hot_reload_started = False
    try:
        hot_reload_started = start_hot_reload()
        if hot_reload_started:
            logger.info("‚úÖ Hot-reload system started")
        else:
            logger.info("‚ÑπÔ∏è  Hot-reload not available (install watchdog for this feature)")
    except Exception as e:
        logger.warning(f"Could not start hot-reload: {e}")

    total_generators = len(registry)
    logger.info(f"üöÄ DAG Generator system initialized successfully!")
    logger.info(f"üìä Total generators: {total_generators}")
    logger.info(f"üî• Hot-reload: {'Active' if hot_reload_started else 'Inactive'}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã hello_world –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    if total_generators == 0:
        logger.error("‚ùå No generators found! Something is wrong with initialization.")
    else:
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
        generators_list = list_generators()
        logger.info(f"üìã Available generators: {[g['name'] for g in generators_list]}")

    return {
        'builtin_count': builtin_count,
        'discovered_count': discovered_count,
        'total_count': total_generators,
        'hot_reload_active': hot_reload_started
    }


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
try:
    _init_result = initialize_generator_system()
    logger.info(f"Initialization result: {_init_result}")
except Exception as e:
    logger.error(f"Failed to initialize generator system: {e}")
    import traceback
    traceback.print_exc()
    _init_result = None

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º views –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è Blueprint –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
try:
    from airflow_dag_generator import views
    logger.info("‚úÖ Views imported successfully")
except Exception as e:
    logger.error(f"‚ùå Failed to import views: {e}")
    import traceback
    traceback.print_exc()

# Public API
__all__ = [
    # Blueprint
    'dag_generator_bp',

    # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    'BaseGenerator',
    'GeneratorRegistry',

    # –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞
    'get_registry',
    'register_generator',
    'get_generator',
    'list_generators',

    # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã (—Ç–æ–ª—å–∫–æ hello_world –∫–∞–∫ –ø—Ä–∏–º–µ—Ä)
    'HelloWorldGenerator',

    # –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ hot-reload
    'get_discovery_manager',
    'discover_and_register_generators',
    'start_hot_reload',
    'stop_hot_reload',
    'is_hot_reload_active',
    'force_reload_all',

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    'initialize_generator_system'
]

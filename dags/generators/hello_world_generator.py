from typing import Dict, Any, List
from datetime import datetime

from airflow_dag_generator.generators.base_generator import BaseGenerator
from airflow_dag_generator.models.form_fields import FormField, FieldType, SelectOption

class HelloWorldGenerator(BaseGenerator):

    def __init__(self):
        super().__init__(
            generator_name="hello_world",
            display_name="Hello World DAG",
            description="Простой Hello World DAG с одной задачей Python operator"
        )
        self.template_version = "1.0.0"

    def get_form_fields(self) -> List[FormField]:
        return [
            FormField(
                name='dag_id',
                type=FieldType.TEXT,
                label='DAG ID',
                required=True,
                placeholder='my_hello_world_dag',
                pattern='^[a-zA-Z0-9_-]+$',
                help_text='Unique identifier for the DAG'
            ),
            FormField(
                name='schedule_interval',
                type=FieldType.SELECT,
                label='Schedule Interval',
                required=True,
                options=[
                    SelectOption(value='@daily', text='Daily'),
                    SelectOption(value='@hourly', text='Hourly'),
                    SelectOption(value='@weekly', text='Weekly'),
                    SelectOption(value='0 2 * * *', text='Daily at 2 AM'),
                    SelectOption(value='None', text='Manual trigger only')
                ]
            ),
            FormField(
                name='owner',
                type=FieldType.TEXT,
                label='Owner',
                required=True,
                default_value='airflow',
                placeholder='airflow'
            ),
            FormField(
                name='description',
                type=FieldType.TEXTAREA,
                label='Description',
                default_value='Generated Hello World DAG',
                placeholder='Enter DAG description...'
            ),
            FormField(
                name='greeting_message',
                type=FieldType.TEXT,
                label='Greeting Message',
                default_value='Hello World from DAG Generator!',
                placeholder='Custom greeting message'
            ),
            FormField(
                name='tags',
                type=FieldType.TEXT,
                label='Tags',
                default_value='generated, hello-world',
                placeholder='tag1, tag2, tag3',
                help_text='Comma-separated tags'
            ),
            FormField(
                name='catchup',
                type=FieldType.CHECKBOX,
                label='Enable Catchup',
                default_value=False,
                help_text='Whether to catch up on missed runs'
            ),
            FormField(
                name='retries',
                type=FieldType.NUMBER,
                label='Retries',
                default_value=1,
                min=0,
                max=10
            ),
            FormField(
                name='retry_delay_minutes',
                type=FieldType.NUMBER,
                label='Retry Delay (minutes)',
                default_value=5,
                min=1,
                max=60
            )
        ]

    def generate(self, form_data: Dict[str, Any]) -> str:

        # Получаем валидированный конфиг как Pydantic объект
        config = self.get_validated_config(form_data)

        tags_list = [tag.strip() for tag in config.tags.split(',') if tag.strip()] if config.tags else ['generated',
                                                                                                        'hello-world']

        dag_code = f'''"""
{config.description or 'Generated Hello World DAG'}

Generated by: {self.get_display_name()}
Created: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""

from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator


def say_hello(**context):
    """Hello World task function"""
    greeting = "{config.greeting_message}"
    dag_id = "{config.dag_id}"
    execution_date = context.get('ds', 'Unknown')
    
    print("=" * 50)
    print(greeting)
    print(f"DAG ID: {{dag_id}}")
    print(f"Execution Date: {{execution_date}}")
    print(f"Owner: {config.owner}")
    print("=" * 50)
    
    return {{
        "message": greeting,
        "dag_id": dag_id,
        "execution_date": execution_date,
        "status": "success"
    }}


# Default arguments
default_args = {{
    'owner': '{config.owner}',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': {config.retries},
    'retry_delay': timedelta(minutes={config.retry_delay_minutes}),
}}

# Create DAG
with DAG(
    dag_id='{config.dag_id}',
    default_args=default_args,
    description='{config.description or "Generated Hello World DAG"}',
    schedule_interval='{config.schedule_interval}',
    start_date=datetime(2024, 1, 1),
    catchup={config.catchup},
    max_active_runs=1,
    tags={tags_list},
) as dag:

    hello_task = PythonOperator(
        task_id='hello_world_task',
        python_callable=say_hello,
        doc_md="""
        ### Hello World Task
        
        This task prints a greeting message and returns execution information.
        
        **Generated by:** {self.get_display_name()}  
        **Message:** {config.greeting_message}
        """,
    )

    hello_task
'''

        return dag_code

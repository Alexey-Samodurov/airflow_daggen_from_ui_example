from datetime import datetime
from typing import Dict, Any, List

from airflow_dag_generator.generators.base_generator import BaseGenerator



class CustomGenerator(BaseGenerator):
    def __init__(self):
        super().__init__(generator_name='custom_generator')
        self.template_version = "1.0.0"

    def get_description(self) -> str:
        return "Простой пример кастомного генератора дагов"

    def get_required_fields(self) -> List[str]:
        return ['dag_id', 'schedule_interval', 'owner']

    def get_optional_fields(self) -> Dict[str, Any]:
        return {
            'catchup': False,
            'max_active_runs': 1,
            'retries': 1,
            'retry_delay_minutes': 5,
        }

    def get_form_fields(self) -> List[Dict[str, Any]]:
        return [
            {
                'name': 'dag_id',
                'type': 'text',
                'label': 'DAG ID',
                'required': True,
                'placeholder': 'my_custom_dag',
                'pattern': '^[a-zA-Z0-9_-]+$',
                'help_text': 'Unique identifier for the DAG (letters, numbers, underscores, hyphens)'
            },
            {
                'name': 'owner',
                'type': 'text',
                'label': 'Owner',
                'required': True,
                'default': 'airflow',
                'placeholder': 'airflow'
            },
            {
                'name': 'schedule_interval',
                'type': 'select',
                'label': 'Schedule Interval',
                'required': True,
                'options': [
                    {'value': '@daily', 'text': 'Daily'},
                    {'value': '@hourly', 'text': 'Hourly'},
                    {'value': '@weekly', 'text': 'Weekly'},
                    {'value': '0 2 * * *', 'text': 'Daily at 2 AM'},
                    {'value': 'None', 'text': 'Manual trigger only'}
                ]
            }
        ]

    def get_display_name(self) -> str:
        return 'custom_generator'

    def generate(self, form_data: Dict[str, Any]) -> str:
        validation_result = self.validate_config(form_data)
        if not validation_result['valid']:
            raise ValueError(f"Invalid configuration: {validation_result['errors']}")

        dag_id = form_data.get('dag_id')
        schedule_interval = form_data.get('schedule_interval')
        description = form_data.get('description', 'Generated Hello World DAG')
        owner = form_data.get('owner', 'airflow')
        tags = list(form_data.get('tags', 'generated, hello-world'))
        catchup = form_data.get('catchup', False)
        retries = form_data.get('retries', 1)
        retry_delay_minutes = form_data.get('retry_delay_minutes', 5)
        max_active_runs = form_data.get('max_active_runs', 1)

        dag_code = f'''"""
{description}

Generated by: {self.get_display_name()}
Created: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""

from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator

# Default arguments
default_args = {{
    'owner': '{owner}',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': {retries},
    'retry_delay': timedelta(minutes={retry_delay_minutes}),
}}

# Create DAG
with DAG(
    dag_id='{dag_id}',
    default_args=default_args,
    description='{description}',
    schedule_interval='{schedule_interval}',
    start_date=datetime(2024, 1, 1),
    catchup={catchup},
    max_active_runs={max_active_runs},
    tags={tags},
) as dag:

    ...
'''

        return dag_code


